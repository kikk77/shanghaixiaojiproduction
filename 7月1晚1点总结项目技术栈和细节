我来帮您分析项目的技术栈、结构和功能。让我先查看关键文件来了解项目全貌。
Read file: kitelegrambot/package.json
Read file: kitelegrambot/app.js
Read file: kitelegrambot/README.md
Read file: kitelegrambot/Dockerfile
Read file: kitelegrambot/railway.toml

Read file: kitelegrambot/config/database.js
Read file: kitelegrambot/config/environment.js
Ran tool
Read file: kitelegrambot/services/botService.js
Read file: kitelegrambot/models/databaseSchema.js

基于对项目文件的详细分析，我为您总结项目的技术栈、架构和功能：

## 🎯 项目概述
**"上海小鸡管家"** - 一个专为服务行业打造的Telegram营销机器人系统，支持用户预约、商家管理、双向评价等完整业务流程。

## 🏗️ 技术栈

### 后端技术
- **运行时**: Node.js 18+
- **数据库**: SQLite (better-sqlite3)
- **Bot框架**: node-telegram-bot-api
- **Web服务**: 原生HTTP服务器
- **定时任务**: node-cron
- **环境配置**: dotenv
- **文件处理**: archiver

### 前端技术
- **管理后台**: HTML/CSS/JavaScript (原生)
- **UI风格**: 响应式设计
- **交互**: 原生DOM操作

### 部署技术
- **容器化**: Docker
- **云平台**: Railway
- **数据存储**: Railway Volume
- **健康检查**: 内置HTTP健康检查端点

## 📁 项目架构

```
kitelegrambot/
├── app.js                    # 应用入口 - HTTP服务器 + Bot启动
├── config/                   # 配置管理
│   ├── database.js          # 数据库连接和迁移
│   └── environment.js       # 多环境配置管理
├── models/                   # 数据模型层
│   ├── databaseSchema.js    # 数据库表结构定义
│   ├── dbOperations.js      # 数据库操作封装
│   └── eavOperations.js     # EAV模型操作
├── services/                 # 业务服务层
│   ├── botService.js        # 核心Bot交互逻辑 (4597行)
│   ├── httpService.js       # HTTP服务和API路由
│   ├── apiService.js        # RESTful API接口
│   ├── orderService.js      # 订单管理服务
│   ├── evaluationService.js # 评价系统服务
│   ├── merchantService.js   # 商家管理服务
│   └── statsService.js      # 数据统计服务
├── admin/                    # Web管理后台
│   ├── orders.html          # 订单管理页面
│   ├── scripts/             # 前端JavaScript
│   └── styles/              # CSS样式
├── scripts/                  # 部署和维护脚本
├── utils/                    # 工具函数
└── data/                     # 数据库文件目录
```

## 🚀 核心功能

### 1. 用户端功能
- **智能预约系统**: 通过触发词启动预约流程
- **地区选择**: 支持多地区服务分类
- **服务类型选择**: 不同服务类型和价格区间
- **商家联系**: 自动匹配商家信息
- **课程完成确认**: 服务完成状态管理
- **双向评价**: 用户对商家的评价系统

### 2. 商家端功能
- **绑定码注册**: 通过特定绑定码注册商家账号
- **个人信息管理**: 姓名、联系方式、服务价格设置
- **技能配置**: 不同服务技能的定价
- **订单处理**: 接收和处理用户预约
- **评价参与**: 对用户进行反向评价

### 3. 管理端功能
- **Web管理后台**: 完整的管理界面
- **订单管理**: 订单状态跟踪和管理
- **商家管理**: 商家信息审核和管理
- **数据统计**: 业务数据分析和报表
- **权限管理**: 管理员身份验证

### 4. 系统功能
- **实时播报**: 订单状态群组推送
- **数据导入导出**: 业务数据备份和迁移
- **定时任务**: 自动化业务流程
- **内存管理**: 自动清理过期数据
- **错误处理**: 完善的异常处理机制

## 🗄️ 数据库设计

### 核心表结构
- **regions**: 地区管理
- **bind_codes**: 商家绑定码
- **merchants**: 商家信息
- **booking_sessions**: 预约会话
- **orders**: 订单数据
- **evaluations**: 评价数据
- **evaluation_sessions**: 评价会话

### 数据库特性
- **环境隔离**: 生产/开发/测试环境分离
- **自动迁移**: 启动时自动执行数据库迁移
- **数据一致性**: 完整的数据一致性检查
- **缓存机制**: 统计数据缓存优化

## ☁️ 部署架构

### Railway部署 (生产环境)
```toml
# railway.toml
[deploy]
startCommand = "npm run railway"
healthcheckPath = "/health"

[[deploy.volumes]]
mountPath = "/app/data"
name = "telegram-bot-data"
```

### 环境变量配置
```bash
NODE_ENV=production
BOT_TOKEN=你的Bot Token
BOT_USERNAME=你的Bot用户名
GROUP_CHAT_ID=播报群组ID
ADMIN_PASSWORD=管理员密码
PORT=3000
```

### Docker容器化
```dockerfile
FROM node:18-alpine
WORKDIR /app
EXPOSE 3000
HEALTHCHECK --interval=30s --timeout=5s \
  CMD curl -f http://localhost:3000/health || exit 1
```

## 🔧 环境管理

### 多环境支持
- **Development**: 本地开发环境
- **Staging**: 测试环境（与生产环境数据一致）
- **Production**: 生产环境

### 启动脚本
```json
{
  "start": "node app.js",
  "railway": "node scripts/railway-start.js",
  "dev": "./start-with-env.sh"
}
```

## 📊 性能优化

### 内存管理
- 定期清理过期数据（30分钟间隔）
- 用户消息历史限制（最多20条）
- 触发词冷却机制（5分钟）
- 预约冷却管理（30分钟）

### 数据库优化
- WAL模式启用
- 索引优化
- 统计数据缓存
- 分表设计

## 🛡️ 安全特性

### 数据保护
- 管理员密码加密存储
- 用户数据隔离
- 输入验证和过滤
- SQL注入防护

### 错误处理
- 完善的异常捕获
- 优雅的错误恢复
- 日志记录和监控
- 健康检查机制

## 📈 监控和维护

### 健康检查
```javascript
// /health 端点返回
{
  "status": "healthy",
  "timestamp": "2025-01-28T10:00:00Z",
  "uptime": 3600,
  "environment": "production",
  "service": "telegram-marketing-bot"
}
```

### 数据备份
```bash
npm run db:backup          # 手动备份
npm run db:backup-scheduled # 定时备份
```

这个项目是一个功能完整、架构清晰的企业级Telegram机器人系统，采用了现代化的技术栈和最佳实践，支持多环境部署和完整的业务流程管理。