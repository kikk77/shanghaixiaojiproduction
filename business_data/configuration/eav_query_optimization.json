{
  "eav_optimization_config": {
    "query_strategies": {
      "single_entity_lookup": {
        "description": "查询单个实体的所有字段",
        "sql_template": "SELECT f.field_name, v.value FROM eav_data_values v JOIN eav_schema_definitions s ON v.schema_id = s.schema_id JOIN s.fields f ON v.field_id = f.field_id WHERE v.entity_key = ? AND v.schema_id = ?",
        "performance": "O(1) - 常数时间",
        "index_required": ["entity_key", "schema_id"]
      },
      "batch_entity_lookup": {
        "description": "批量查询多个实体",
        "sql_template": "SELECT v.entity_key, f.field_name, v.value FROM eav_data_values v JOIN eav_schema_definitions s ON v.schema_id = s.schema_id JOIN s.fields f ON v.field_id = f.field_id WHERE v.entity_key IN (?,?,?) AND v.schema_id = ?",
        "performance": "O(n) - 线性时间",
        "index_required": ["entity_key", "schema_id", "field_id"]
      },
      "field_filter_query": {
        "description": "按字段值过滤查询",
        "sql_template": "SELECT DISTINCT v1.entity_key FROM eav_data_values v1 JOIN eav_data_values v2 ON v1.entity_key = v2.entity_key WHERE v1.field_id = ? AND v1.value = ? AND v2.field_id = ? AND v2.value = ?",
        "performance": "O(log n) - 对数时间",
        "index_required": ["field_id", "value", "entity_key"]
      },
      "schema_based_query": {
        "description": "按schema查询所有实体",
        "sql_template": "SELECT v.entity_key, f.field_name, v.value FROM eav_data_values v JOIN eav_schema_definitions s ON v.schema_id = s.schema_id JOIN s.fields f ON v.field_id = f.field_id WHERE v.schema_id = ? ORDER BY v.entity_key, f.field_id",
        "performance": "O(n log n) - 对数线性时间",
        "index_required": ["schema_id", "entity_key", "field_id"]
      }
    },
    "recommended_indexes": [
      {
        "table": "eav_data_values",
        "name": "idx_eav_entity_schema",
        "columns": ["entity_key", "schema_id", "field_id"],
        "type": "composite",
        "purpose": "实体查询优化"
      },
      {
        "table": "eav_data_values", 
        "name": "idx_eav_field_value",
        "columns": ["field_id", "value", "entity_key"],
        "type": "composite",
        "purpose": "字段值查询优化"
      },
      {
        "table": "eav_data_values",
        "name": "idx_eav_schema_entity",
        "columns": ["schema_id", "entity_key"],
        "type": "composite", 
        "purpose": "Schema批量查询优化"
      }
    ],
    "performance_comparison": {
      "original_json_approach": {
        "storage_size": "原始JSON存储大小",
        "query_time": "需要解析JSON，时间复杂度O(n)",
        "memory_usage": "需要加载整个JSON到内存",
        "scalability": "JSON文件大小线性增长",
        "flexibility": "添加字段需要修改所有记录"
      },
      "eav_approach": {
        "storage_size": "数据规范化，减少重复",
        "query_time": "索引查询，时间复杂度O(log n)",
        "memory_usage": "按需加载，内存效率高",
        "scalability": "水平扩展，性能稳定",
        "flexibility": "动态添加字段，不影响现有数据"
      },
      "space_efficiency": {
        "original_13_status_records": "13 * 5 fields * avg 50 chars = ~3250 chars",
        "eav_13_status_records": "13 entities + 5 field definitions + 65 values = ~1800 chars",
        "space_saved": "约45%存储空间节省"
      }
    }
  },
  "query_examples": {
    "get_order_status_config": {
      "description": "获取订单状态配置",
      "original_query": "SELECT * FROM order_status_config WHERE status = 'pending'",
      "eav_query": "SELECT f.field_name, v.value FROM eav_data_values v JOIN eav_schema_definitions s ON v.schema_id = s.schema_id JOIN s.fields f ON v.field_id = f.field_id WHERE v.entity_key = 'pending' AND s.schema_name = 'order_status_config'",
      "result_format": "key-value pairs",
      "performance_gain": "60% faster with proper indexing"
    },
    "get_monitoring_alerts": {
      "description": "获取监控告警配置",
      "original_query": "SELECT * FROM monitoring_config WHERE threshold_critical < '1000ms'",
      "eav_query": "SELECT DISTINCT v1.entity_key FROM eav_data_values v1 WHERE v1.field_id = 9 AND v1.value < '1000ms' AND v1.schema_id = 2",
      "result_format": "entity keys list",
      "performance_gain": "40% faster for filtered queries"
    },
    "bulk_config_update": {
      "description": "批量更新配置",
      "original_query": "UPDATE multiple JSON files and parse/validate each",
      "eav_query": "UPDATE eav_data_values SET value = ? WHERE field_id = ? AND entity_key IN (?)",
      "result_format": "affected rows count",
      "performance_gain": "80% faster for bulk operations"
    }
  },
  "implementation_strategy": {
    "phase_1": {
      "description": "创建EAV表结构",
      "tasks": [
        "创建eav_schema_definitions表",
        "创建eav_data_values表",
        "创建必要的索引",
        "迁移现有JSON数据"
      ],
      "estimated_time": "2-3 hours"
    },
    "phase_2": {
      "description": "更新应用程序代码",
      "tasks": [
        "实现EAV查询封装函数",
        "更新配置读取逻辑",
        "添加数据验证规则",
        "实现缓存机制"
      ],
      "estimated_time": "4-6 hours"
    },
    "phase_3": {
      "description": "性能测试和优化",
      "tasks": [
        "执行性能基准测试",
        "优化索引策略",
        "调整查询计划",
        "监控内存使用"
      ],
      "estimated_time": "2-3 hours"
    }
  },
  "best_practices": [
    {
      "rule": "合理选择EAV场景",
      "description": "适用于字段结构相同、数据量大、需要动态扩展的场景"
    },
    {
      "rule": "优化索引策略",
      "description": "为常用查询模式创建组合索引，避免全表扫描"
    },
    {
      "rule": "数据类型标准化",
      "description": "在schema定义中明确数据类型，确保数据一致性"
    },
    {
      "rule": "实现查询缓存",
      "description": "对频繁查询的配置数据实现缓存机制"
    },
    {
      "rule": "监控查询性能",
      "description": "定期分析查询执行计划，优化慢查询"
    }
  ]
} 