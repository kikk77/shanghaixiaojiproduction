{
  "migration_version": "2.0.0",
  "current_db_version": "1.1.2",
  "migration_scripts": [
    {
      "version": "2.0.0_001",
      "description": "修复regions表sort_order重复问题",
      "type": "data_fix",
      "rollback_available": true,
      "sql": [
        "UPDATE regions SET sort_order = 10 WHERE id = 10 AND name = '黄埔';",
        "CREATE UNIQUE INDEX idx_regions_sort_order ON regions(sort_order);"
      ],
      "rollback_sql": [
        "DROP INDEX IF EXISTS idx_regions_sort_order;",
        "UPDATE regions SET sort_order = 9 WHERE id = 10 AND name = '黄埔';"
      ]
    },
    {
      "version": "2.0.0_002",
      "description": "创建merchant_skills表",
      "type": "schema_change",
      "rollback_available": true,
      "sql": [
        "CREATE TABLE merchant_skills (",
        "  id INTEGER PRIMARY KEY AUTOINCREMENT,",
        "  merchant_id INTEGER NOT NULL,",
        "  skill_type VARCHAR(20) NOT NULL,",
        "  skill_description TEXT,",
        "  skill_level INTEGER CHECK(skill_level >= 1 AND skill_level <= 5),",
        "  created_at INTEGER NOT NULL,",
        "  updated_at INTEGER NOT NULL,",
        "  FOREIGN KEY (merchant_id) REFERENCES merchants(id)",
        ");",
        "CREATE INDEX idx_merchant_skills_merchant ON merchant_skills(merchant_id);",
        "CREATE INDEX idx_merchant_skills_type ON merchant_skills(skill_type);"
      ],
      "rollback_sql": [
        "DROP TABLE IF EXISTS merchant_skills;"
      ],
      "data_migration": "INSERT INTO merchant_skills (merchant_id, skill_type, skill_description, skill_level, created_at, updated_at) SELECT id, 'wash', skill_wash, 3, created_at, created_at FROM merchants WHERE skill_wash IS NOT NULL;"
    },
    {
      "version": "2.0.0_003",
      "description": "创建evaluation_details表",
      "type": "schema_change", 
      "rollback_available": true,
      "sql": [
        "CREATE TABLE evaluation_details (",
        "  id INTEGER PRIMARY KEY AUTOINCREMENT,",
        "  evaluation_id INTEGER NOT NULL,",
        "  metric_name VARCHAR(20) NOT NULL,",
        "  score INTEGER CHECK(score >= 1 AND score <= 10),",
        "  text_value VARCHAR(100),",
        "  created_at INTEGER NOT NULL,",
        "  FOREIGN KEY (evaluation_id) REFERENCES evaluations(id)",
        ");",
        "CREATE INDEX idx_evaluation_details_evaluation ON evaluation_details(evaluation_id);",
        "CREATE INDEX idx_evaluation_details_metric ON evaluation_details(metric_name);"
      ],
      "rollback_sql": [
        "DROP TABLE IF EXISTS evaluation_details;"
      ]
    },
    {
      "version": "2.0.0_004",
      "description": "添加订单状态扩展字段",
      "type": "schema_change",
      "rollback_available": true,
      "sql": [
        "ALTER TABLE orders ADD COLUMN status_updated_at INTEGER;",
        "ALTER TABLE orders ADD COLUMN status_updated_by VARCHAR(50);",
        "ALTER TABLE orders ADD COLUMN failure_reason TEXT;",
        "UPDATE orders SET status_updated_at = updated_at WHERE status_updated_at IS NULL;"
      ],
      "rollback_sql": [
        "ALTER TABLE orders DROP COLUMN failure_reason;",
        "ALTER TABLE orders DROP COLUMN status_updated_by;", 
        "ALTER TABLE orders DROP COLUMN status_updated_at;"
      ]
    },
    {
      "version": "2.0.0_005",
      "description": "创建性能优化索引",
      "type": "performance",
      "rollback_available": true,
      "sql": [
        "CREATE INDEX idx_interactions_user_timestamp ON interactions(user_id, timestamp);",
        "CREATE INDEX idx_orders_merchant_status ON orders(merchant_id, status);",
        "CREATE INDEX idx_orders_user_created ON orders(user_id, created_at);",
        "CREATE INDEX idx_orders_status_updated ON orders(status, updated_at);",
        "CREATE INDEX idx_booking_sessions_status ON booking_sessions(status, updated_at);",
        "CREATE INDEX idx_booking_sessions_user ON booking_sessions(user_id, merchant_id);",
        "CREATE INDEX idx_evaluations_session_type ON evaluations(booking_session_id, evaluator_type);",
        "CREATE INDEX idx_evaluations_target ON evaluations(target_id, status);",
        "CREATE INDEX idx_merchants_region_status ON merchants(region_id, status);",
        "CREATE UNIQUE INDEX idx_merchants_user_id ON merchants(user_id);",
        "CREATE INDEX idx_channel_clicks_merchant ON channel_clicks(merchant_id, clicked_at);",
        "CREATE INDEX idx_bind_codes_used ON bind_codes(used, used_at);"
      ],
      "rollback_sql": [
        "DROP INDEX IF EXISTS idx_interactions_user_timestamp;",
        "DROP INDEX IF EXISTS idx_orders_merchant_status;",
        "DROP INDEX IF EXISTS idx_orders_user_created;",
        "DROP INDEX IF EXISTS idx_orders_status_updated;",
        "DROP INDEX IF EXISTS idx_booking_sessions_status;",
        "DROP INDEX IF EXISTS idx_booking_sessions_user;",
        "DROP INDEX IF EXISTS idx_evaluations_session_type;",
        "DROP INDEX IF EXISTS idx_evaluations_target;",
        "DROP INDEX IF EXISTS idx_merchants_region_status;",
        "DROP INDEX IF EXISTS idx_merchants_user_id;",
        "DROP INDEX IF EXISTS idx_channel_clicks_merchant;",
        "DROP INDEX IF EXISTS idx_bind_codes_used;"
      ]
    }
  ],
  "deployment_procedure": {
    "pre_deployment": [
      {
        "step": "backup_database",
        "description": "创建完整数据库备份",
        "command": "sqlite3 marketing_bot.db '.backup backup_pre_migration.db'"
      },
      {
        "step": "validate_data_integrity",
        "description": "验证数据完整性",
        "queries": [
          "SELECT COUNT(*) FROM merchants WHERE region_id NOT IN (SELECT id FROM regions);",
          "SELECT COUNT(*) FROM orders WHERE merchant_id NOT IN (SELECT id FROM merchants);"
        ]
      },
      {
        "step": "check_disk_space",
        "description": "检查磁盘空间是否足够",
        "min_free_space": "500MB"
      }
    ],
    "deployment": [
      {
        "step": "apply_migrations",
        "description": "按顺序应用迁移脚本",
        "order": "sequential"
      },
      {
        "step": "update_db_version",
        "description": "更新数据库版本号",
        "sql": "UPDATE db_meta SET value = '2.0.0' WHERE key = 'db_version';"
      }
    ],
    "post_deployment": [
      {
        "step": "verify_schema",
        "description": "验证数据库结构",
        "commands": [
          ".schema merchant_skills",
          ".schema evaluation_details"
        ]
      },
      {
        "step": "update_statistics",
        "description": "更新表统计信息",
        "sql": "ANALYZE;"
      },
      {
        "step": "performance_test",
        "description": "执行性能测试查询",
        "test_queries": [
          "EXPLAIN QUERY PLAN SELECT * FROM orders WHERE merchant_id = 4 AND status = 'pending';",
          "EXPLAIN QUERY PLAN SELECT * FROM interactions WHERE user_id = 6843026401 ORDER BY timestamp DESC LIMIT 10;"
        ]
      }
    ],
    "rollback_procedure": [
      {
        "step": "stop_application",
        "description": "停止应用程序"
      },
      {
        "step": "restore_backup",
        "description": "恢复备份数据库",
        "command": "cp backup_pre_migration.db marketing_bot.db"
      },
      {
        "step": "restart_application",
        "description": "重启应用程序"
      }
    ]
  },
  "testing_checklist": [
    {
      "test": "merchant_registration",
      "description": "测试商家注册流程"
    },
    {
      "test": "order_creation",
      "description": "测试订单创建流程"
    },
    {
      "test": "evaluation_submission",
      "description": "测试评价提交流程"
    },
    {
      "test": "query_performance",
      "description": "测试查询性能是否改善"
    },
    {
      "test": "data_consistency",
      "description": "验证数据一致性"
    }
  ]
} 